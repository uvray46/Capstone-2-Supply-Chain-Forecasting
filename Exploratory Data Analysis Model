# 1. Imports
import pandas as pd
import numpy as np
import os
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.decomposition import PCA
from sklearn.preprocessing import scale

# 2. Load the cleaned and merged data
data_path = r'C:\Users\jwhit\OneDrive\Documents\Data Science Course\Cap2 Project\Processed_Data\Merged_Wrangled_Data.csv'
merged_data = pd.read_csv(data_path)

# Display basic information and a preview of the data
merged_data.info()
print(merged_data.head())

# 3. Initial Data Exploration

# 3.1 Summary Statistics
print("\nSummary Statistics:")
print(merged_data.describe())

# 3.2 Checking for Missing Values
print("\nMissing Values:")
print(merged_data.isnull().sum())

# 3.3 Distribution of Key Metrics
key_metrics = ['GDP (current US$)', 'GDP growth (annual %)', 'Inflation, GDP deflator (annual %)', 'LPI Score', 'Revenue']

# Plot histograms for the key metrics
plt.figure(figsize=(12, 10))
merged_data[key_metrics].hist(bins=20, edgecolor='black', alpha=0.75, figsize=(12, 10))
plt.suptitle('Distribution of Key Economic and Sales Metrics', y=1.02)
plt.tight_layout(pad=2.0)
plt.show()

# 4. Visualizations

# 4.1 Correlation Heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(merged_data[key_metrics].corr(), annot=True, cmap='coolwarm', vmin=-1, vmax=1)
plt.title('Correlation Matrix of Key Metrics')
plt.show()

# 4.2 Scatter Plots: Explore relationships between GDP and Revenue
plt.figure(figsize=(8, 6))
plt.scatter(merged_data['GDP (current US$)'], merged_data['Revenue'], alpha=0.5, color='b')
plt.title('GDP vs Revenue')
plt.xlabel('GDP (current US$)')
plt.ylabel('Revenue')
plt.grid(True)
plt.show()

merged_data['Inflation, GDP deflator (annual %)'] = pd.to_numeric(merged_data['Inflation, GDP deflator (annual %)'], errors='coerce')
merged_data_cleaned = merged_data.dropna(subset=['Inflation, GDP deflator (annual %)'])

# Plotting GDP Growth Boxplot
plt.figure(figsize=(6, 8))
sns.boxplot(y='GDP growth (annual %)', data=merged_data)
plt.title('Box Plot of GDP Growth (annual %)')
plt.show()

# Plotting Inflation Boxplot
plt.figure(figsize=(6, 8))
sns.boxplot(y='Inflation, GDP deflator (annual %)', data=merged_data)
plt.title('Box Plot of Inflation (GDP Deflator)')
plt.show()

# 4.4 Pair Plot of Key Metrics
sns.pairplot(merged_data[key_metrics].dropna())
plt.suptitle('Pairwise Relationships between Key Economic and Sales Metrics', y=1.02)
plt.show()

# 5. Optional: PCA for Dimensionality Reduction (if applicable)

# 5.1 Scaling the Data
scaled_data = scale(merged_data[key_metrics].dropna())

# 5.2 Performing PCA
pca = PCA().fit(scaled_data)
plt.figure(figsize=(10, 6))
plt.plot(pca.explained_variance_ratio_.cumsum(), marker='o', linestyle='-')
plt.title('Cumulative Variance Explained by PCA Components')
plt.xlabel('Number of Components')
plt.ylabel('Cumulative Variance Explained')
plt.grid(True)
plt.show()

# 6. Save the Processed Data (if additional features are created later)
datapath = r'C:\Users\jwhit\OneDrive\Documents\Data Science Course\Cap2 Project\Processed_Data'
if not os.path.exists(datapath):
    os.makedirs(datapath)

def save_file(data, filename, datapath):
    filepath = os.path.join(datapath, filename)
    data.to_csv(filepath, index=False)

save_file(merged_data, 'Merged_Wrangle_Data(EDA).csv', datapath)# Check data types of the key metrics

print("Data types of key metrics:")
print(merged_data[key_metrics].dtypes)

# Attempt to plot one metric as a simple test
plt.figure(figsize=(8, 6))
merged_data['GDP (current US$)'].hist(bins=20, edgecolor='black', alpha=0.75)
plt.title('Distribution of GDP (current US$)')
plt.xlabel('GDP (current US$)')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()
