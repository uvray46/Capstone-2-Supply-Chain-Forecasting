import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

# Load Data
sales_data_path = r'C:\Users\jwhit\OneDrive\Documents\Data Science Course\Cap2 Project\Cleaned_GlobalSales_Data.xlsx'
logistics_data_path = r'C:\Users\jwhit\OneDrive\Documents\Data Science Course\Cap2 Project\Cleaned_GlobalLogistics_Data (1).csv'
economics_data_path = r'C:\Users\jwhit\OneDrive\Documents\Data Science Course\Cap2 Project\Cleaned_GlobalEconomics_Data.csv'

sales_data = pd.read_excel(sales_data_path)
logistics_data = pd.read_csv(logistics_data_path)
economics_data = pd.read_csv(economics_data_path)

# Display summaries
print("Sales Data:")
sales_data.info()
print(sales_data.head())

print("\nLogistics Data:")
logistics_data.info()
print(logistics_data.head())

print("\nEconomics Data:")
economics_data.info()
print(economics_data.head())

# Extract relevant sales data (e.g., Revenue over time)
revenue_data = sales_data[sales_data['Annual Data (Millions of US $ except par share data)'].str.strip() == 'Revenue']
revenue_series = revenue_data.drop(columns=['Annual Data (Millions of US $ except par share data)']).T
revenue_series.columns = ['Revenue']
revenue_series.index = pd.to_datetime(revenue_series.index, format='%Y')
revenue_series = revenue_series.astype(float).squeeze()

check_missing_values(sales_data, "Sales Data")
check_missing_values(logistics_data, "Logistics Data")
check_missing_values(economics_data, "Economics Data")

# Pivot and clean economic data
economic_pivot = economics_data.pivot_table(index=['Country Name'], columns='Series Name', aggfunc='first')
economic_pivot.columns = [f'{col[1]}' for col in economic_pivot.columns]
economic_pivot.reset_index(inplace=True)

# Extract relevant metrics
economic_metrics = economic_pivot[['Country Name', 'GDP (current US$)', 'GDP growth (annual %)', 'Inflation, GDP deflator (annual %)', 'Revenue']]
logistics_metrics = logistics_data[['Country Name', 'LPI Score', 'Customs Score', 'Infrastructure Score']]

# Merge data
merged_data = pd.merge(economic_metrics, logistics_metrics, on='Country Name')

# Handle missing values in the merged data
merged_data_clean = merged_data.dropna()

# Save the Processed Data
datapath = r'C:\Users\jwhit\OneDrive\Documents\Data Science Course\Cap2 Project\Processed_Data'
if not os.path.exists(datapath):
    os.makedirs(datapath)

def save_file(data, filename, datapath):
    filepath = os.path.join(datapath, filename)
    data.to_csv(filepath, index=False)

save_file(merged_data_clean, 'Merged_Wrangled_Data.csv', datapath)

print("Data wrangling completed. Cleaned data saved for future analysis.")

# Validation Plots

# Time Series Plot for Revenue from Sales Data
plt.figure(figsize=(10, 6))
plt.plot(revenue_series, marker='o', linestyle='-', color='b')
plt.title('Revenue Trend Over Time')
plt.xlabel('Year')
plt.ylabel('Revenue (Millions of US$)')
plt.grid(True)
plt.show()

# Ensure correct selection of key metrics
key_metrics = ['GDP (current US$)', 'GDP growth (annual %)', 'Inflation, GDP deflator (annual %)', 'Revenue']

# Check the columns in merged_data_clean to ensure only the expected columns are being selected
print("Columns in merged_data_clean:")
print(merged_data_clean.columns)

# Ensure only the relevant columns are selected for plotting
metrics_to_plot = merged_data_clean[key_metrics]

# Ensure all selected columns are numeric
metrics_to_plot = metrics_to_plot.apply(pd.to_numeric, errors='coerce')

# Drop rows that are entirely NaN
metrics_to_plot = metrics_to_plot.dropna(how='all')

# Boxplot for each metric
plt.figure(figsize=(12, 8))
metrics_to_plot.boxplot()
plt.title('Box Plot of Key Economic Indicators')
plt.xticks(rotation=45)
plt.show()
